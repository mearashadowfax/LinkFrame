---
import Dropzone from "../ui/Dropzone.astro";
import Icon from "../ui/icons/Icon.astro";
---

<div class="relative bg-gradient-to-tl from-blue-100 via-transparent">
  <div class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="grid items-start gap-8 md:grid-cols-2 lg:gap-12">
      <div class="mx-auto sm:mx-0 order-last sm:order-first">
        <div class="max-w-xs p-4">
          <div class="flex items-center justify-between">
            <p class="text-lg font-medium text-slate-800">Rotate</p>
            <input
              id="rotateValue"
              type="number"
              class="border-light min-w-10 justify-center rounded-lg border border-slate-200 p-1 text-center text-sm font-normal outline-none focus:border-sky-500 focus:ring-sky-500"
              value="0"
              min="-180"
              max="180"
              oninput="document.getElementById('rotateSlider').value = this.value"
            />
          </div>
          <input
            id="rotateSlider"
            class="mt-3 w-full accent-sky-600"
            type="range"
            value="0"
            min="-180"
            max="180"
            oninput="document.getElementById('rotateValue').value = this.value"
          />
        </div>

        <div class="max-w-xs p-4">
          <div class="flex items-center justify-between">
            <p class="text-lg font-medium text-slate-800">Scale</p>
            <input
              id="scaleValue"
              type="number"
              class="border-light min-w-10 justify-center rounded-lg border border-slate-200 p-1 text-center text-sm font-normal outline-none focus:border-sky-500 focus:ring-sky-500"
              value="1"
              min="0.1"
              max="1.9"
              step="0.1"
              oninput="document.getElementById('scaleSlider').value = this.value"
            />
          </div>
          <input
            id="scaleSlider"
            class="mt-3 w-full accent-sky-600"
            type="range"
            value="1"
            min="0.1"
            max="1.9"
            step="0.1"
            oninput="document.getElementById('scaleValue').value = this.value"
          />
        </div>

        <div class="max-w-xs p-4 colorContainer">
          <div class="hs-tooltip [--trigger:hover] sm:[--placement:right]">
            <p
              class="flex items-center gap-x-2 text-lg font-medium leading-tight text-slate-800"
            >
              Frame Color <Icon name="info" />
              <span
                class="hs-tooltip-content hs-tooltip-shown:opacity-100 hs-tooltip-shown:visible invisible absolute z-10 inline-block w-80 rounded-xl bg-slate-200 px-4 py-2 text-base font-medium leading-tight text-slate-700 opacity-0 shadow-sm transition-opacity"
                role="tooltip"
              >
                Click the "Random" button, enter a hex code, or use the color
                picker to create a custom color scale.
              </span>
            </p>
          </div>
          <div class="relative mt-5 h-[3.25rem]">
            <input
              id="hexInput1"
              type="text"
              placeholder=""
              class="hexInput h-full w-full border-slate-200 rounded-lg pl-14 font-medium text-slate-700 focus:border-sky-500 focus:ring-sky-500"
            />
            <input
              id="colorPicker1"
              type="color"
              class="colorPicker absolute top-1/2 h-7 w-7 -translate-y-1/2 left-4 transform cursor-pointer rounded-full border-none"
            />
            <button
              id="randomBtn1"
              class="randomBtn absolute right-2 top-1/2 flex -translate-y-1/2 transform cursor-pointer items-center gap-x-1 rounded-full py-1.5 font-medium text-slate-500"
            >
              Random <Icon name="random" />
            </button>
          </div>
        </div>

        <div class="max-w-xs p-4">
          <div class="flex items-center justify-between">
            <p class="text-lg font-medium text-slate-800">
              Frame Start Position
            </p>
            <input
              id="startPositionValue"
              type="number"
              class="border-light min-w-10 justify-center rounded-lg border border-slate-200 p-1 text-center text-sm font-normal outline-none focus:border-sky-500 focus:ring-sky-500"
              value="0"
              min="-180"
              max="180"
              oninput="document.getElementById('startPositionSlider').value = this.value"
            />
          </div>
          <input
            id="startPositionSlider"
            class="mt-3 w-full accent-sky-600"
            type="range"
            value="0"
            min="-180"
            max="180"
            oninput="document.getElementById('startPositionValue').value = this.value"
          />
        </div>

        <div class="max-w-xs p-4">
          <div class="flex items-center justify-between">
            <p class="text-lg font-medium text-slate-800">Frame End Position</p>
            <input
              id="endPositionValue"
              type="number"
              class="border-light min-w-10 justify-center rounded-lg border border-slate-200 p-1 text-center text-sm font-normal outline-none focus:border-sky-500 focus:ring-sky-500"
              value="0"
              min="-180"
              max="180"
              oninput="document.getElementById('endPositionSlider').value = this.value"
            />
          </div>
          <input
            id="endPositionSlider"
            class="mt-3 w-full accent-sky-600"
            type="range"
            value="0"
            min="-180"
            max="180"
            oninput="document.getElementById('endPositionValue').value = this.value"
          />
        </div>

        <div class="max-w-xs p-4">
          <div class="mb-3">
            <p class="text-lg font-medium text-slate-800">Frame Text</p>
          </div>

          <label for="input-email-label" class="sr-only">Frame Text</label>
          <input
            type="text"
            id="input-badge-text-label"
            class="block w-full rounded-lg border-slate-200 px-4 py-3 text-base focus:border-sky-500 focus:ring-sky-500"
            placeholder="#LinkedIn"
          />
        </div>

        <div class="max-w-xs p-4 colorContainer">
          <div class="hs-tooltip [--trigger:hover] sm:[--placement:right]">
            <p
              class="flex items-center gap-x-2 text-lg font-medium leading-tight text-slate-800"
            >
              Frame Text Color <Icon name="info" />
              <span
                class="hs-tooltip-content hs-tooltip-shown:opacity-100 hs-tooltip-shown:visible invisible absolute z-10 inline-block w-80 rounded-xl bg-slate-200 px-4 py-2 text-base font-medium leading-tight text-slate-700 opacity-0 shadow-sm transition-opacity"
                role="tooltip"
              >
                Click the "Random" button, enter a hex code, or use the color
                picker to create a custom color scale.
              </span>
            </p>
          </div>
          <div class="relative mt-5 h-[3.25rem]">
            <input
              id="hexInput2"
              type="text"
              placeholder=""
              class="hexInput h-full w-full border-slate-200 rounded-lg pl-14 font-medium text-slate-700 focus:border-sky-500 focus:ring-sky-500"
            />
            <input
              id="colorPicker2"
              type="color"
              class="colorPicker absolute top-1/2 h-7 w-7 -translate-y-1/2 left-4 transform cursor-pointer rounded-full border-none"
            />
            <button
              id="randomBtn2"
              class="randomBtn absolute right-2 top-1/2 flex -translate-y-1/2 transform cursor-pointer items-center gap-x-1 rounded-full py-1.5 font-medium text-slate-500"
            >
              Random <Icon name="random" />
            </button>
          </div>
        </div>

        <div class="max-w-xs p-4">
          <div class="mb-3">
            <p class="text-lg font-medium text-slate-800">Font Size</p>
          </div>
          <div
            class="bg-white border border-slate-200 rounded-lg"
            data-hs-input-number=""
          >
            <div class="w-full flex justify-between items-center gap-x-1">
              <div class="grow py-2 px-3">
                <input
                  class="w-full p-0 bg-transparent border-0 text-slate-800 focus:ring-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
                  style="-moz-appearance: textfield;"
                  type="number"
                  aria-roledescription="Number field"
                  value="36"
                  data-hs-input-font-size-input=""
                />
              </div>
              <div
                class="flex items-center -gap-y-px divide-x divide-slate-200 border-s border-slate-200"
              >
                <button
                  type="button"
                  class="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-medium last:rounded-e-lg bg-white text-slate-800 hover:bg-slate-50 focus:outline-none focus:bg-slate-50"
                  aria-label="Decrease"
                  data-hs-input-font-size-decrement=""
                >
                  <svg
                    class="shrink-0 size-3.5"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14"></path>
                  </svg>
                </button>
                <button
                  type="button"
                  class="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-medium last:rounded-e-lg bg-white text-slate-800 hover:bg-slate-50 focus:outline-none focus:bg-slate-50"
                  aria-label="Increase"
                  data-hs-input-font-size-increment=""
                >
                  <svg
                    class="shrink-0 size-3.5"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14"></path>
                    <path d="M12 5v14"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="max-w-xs p-4">
          <div class="mb-3">
            <p class="text-lg font-medium text-slate-800">Letter Spacing</p>
          </div>
          <div
            class="bg-white border border-slate-200 rounded-lg"
            data-hs-input-number=""
          >
            <div class="w-full flex justify-between items-center gap-x-1">
              <div class="grow py-2 px-3">
                <input
                  class="w-full p-0 bg-transparent border-0 text-slate-800 focus:ring-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
                  style="-moz-appearance: textfield;"
                  type="number"
                  aria-roledescription="Number field"
                  value="0"
                  data-hs-input-letter-spacing=""
                />
              </div>
              <div
                class="flex items-center -gap-y-px divide-x divide-slate-200 border-s border-slate-200"
              >
                <button
                  type="button"
                  class="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-medium last:rounded-e-lg bg-white text-slate-800 hover:bg-slate-50 focus:outline-none focus:bg-slate-50"
                  aria-label="Decrease"
                  data-hs-input-letter-spacing-decrement=""
                >
                  <svg
                    class="shrink-0 size-3.5"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14"></path>
                  </svg>
                </button>
                <button
                  type="button"
                  class="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-medium last:rounded-e-lg bg-white text-slate-800 hover:bg-slate-50 focus:outline-none focus:bg-slate-50"
                  aria-label="Increase"
                  data-hs-input-letter-spacing-increment=""
                >
                  <svg
                    class="shrink-0 size-3.5"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14"></path>
                    <path d="M12 5v14"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="sticky-column">
        <Dropzone />
      </div>
    </div>
  </div>
</div>

<style>
  @media (min-width: 640px) {
  .sticky-column {
    position: -webkit-sticky;
    position: sticky;
    top: 15%;
    align-self: start;
  }
  }

  :global(.colorpick-eyedropper-input-trigger) {
    visibility: hidden;
  }

  .colorPicker {
    display: block;
    padding: 0;
    border: 0;
    border-radius: 9999px;
    -webkit-tap-highlight-color: transparent;
    overflow: hidden;
    background: none;
    appearance: none;
    -webkit-appearance: none;
  }

  .colorPicker::-webkit-color-swatch-wrapper {
    padding: 0;
  }

  .colorPicker::-webkit-color-swatch {
    border: none;
    border-radius: 50%;
  }

  .colorPicker::-moz-color-swatch {
    border: none;
    border-radius: 50%;
  }
</style>

<script>
  import "@preline/tooltip/index.js";
  interface ColorSection {
    hexInput: HTMLInputElement;
    colorPicker: HTMLInputElement;
    randomBtn: HTMLButtonElement;
  }

  // Function to generate a random hex color
  function getRandomColor(): string {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }

  // Function to set the color for a specific section
  function setColor(section: ColorSection, color: string) {
    if (!section.hexInput || !section.colorPicker) {
      console.error("Element not found");
      return;
    }

    section.hexInput.placeholder = color;
    section.hexInput.value = color;
    section.colorPicker.value = color;
  }

  // Initialize all sections
  document
    .querySelectorAll<HTMLElement>(".colorContainer")
    .forEach((sectionElement) => {
      const hexInput =
        sectionElement.querySelector<HTMLInputElement>(".hexInput");
      const colorPicker =
        sectionElement.querySelector<HTMLInputElement>(".colorPicker");
      const randomBtn =
        sectionElement.querySelector<HTMLButtonElement>(".randomBtn");

      if (!hexInput || !colorPicker || !randomBtn) {
        console.error("Element missing in section:", sectionElement);
        return;
      }

      const section: ColorSection = { hexInput, colorPicker, randomBtn };

      const initialColor = getRandomColor();
      setColor(section, initialColor);

      // Handle the random button click
      randomBtn.addEventListener("click", () => {
        const randomColor = getRandomColor();
        setColor(section, randomColor);
      });

      // Update color picker and input when typing a hex code
      hexInput.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;
        if (/^#[0-9A-F]{6}$/i.test(value)) {
          setColor(section, value);
        }
      });
    });
</script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
  const letterSpacingValues = [-0.05, -0.025, 0, 0.025, 0.05, 0.1];
  let currentIndexLetterSpacing = 2;

  const inputElementLetterSpacing = document.querySelector("[data-hs-input-letter-spacing]");
  const decreaseButtonLetterSpacing = document.querySelector(
    "[data-hs-input-letter-spacing-decrement]"
  );
  const increaseButtonLetterSpacing = document.querySelector(
    "[data-hs-input-letter-spacing-increment]"
  );

  inputElementLetterSpacing.value = letterSpacingValues[currentIndexLetterSpacing];

  increaseButtonLetterSpacing.addEventListener("click", () => {
    if (currentIndexLetterSpacing < letterSpacingValues.length - 1) {
      currentIndexLetterSpacing++;
      updateLetterSpacing();
    }
  });

  decreaseButtonLetterSpacing.addEventListener("click", () => {
    if (currentIndexLetterSpacing > 0) {
      currentIndexLetterSpacing--;
      updateLetterSpacing();
    }
  });

  function updateLetterSpacing() {
    const valueLetterSpacing = letterSpacingValues[currentIndexLetterSpacing];
    inputElementLetterSpacing.value = valueLetterSpacing;
    console.log(`Current letter spacing: ${valueLetterSpacing}em`);
  }


  const fontSizeValues = [16, 20, 24, 32, 36, 40, 48];
  let currentFontSizeIndex = 3;

  const inputElementFontSize = document.querySelector("[data-hs-input-font-size-input]");
  const decreaseButtonFontSize = document.querySelector(
    "[data-hs-input-font-size-decrement]"
  );
  const increaseButtonFontSize = document.querySelector(
    "[data-hs-input-font-size-increment]"
  );

  inputElementFontSize.value = fontSizeValues[currentFontSizeIndex];

  increaseButtonFontSize.addEventListener("click", () => {
    if (currentFontSizeIndex < fontSizeValues.length - 1) {
      currentFontSizeIndex++;
      updateFontSize();
    }
  });

  decreaseButtonFontSize.addEventListener("click", () => {
    if (currentFontSizeIndex > 0) {
      currentFontSizeIndex--;
      updateFontSize();
    }
  });

  function updateFontSize() {
    const valueFontSize = fontSizeValues[currentFontSizeIndex];
    inputElementFontSize.value = valueFontSize;
    console.log(`Current letter spacing: ${valueFontSize}em`);
  }
});
</script>
